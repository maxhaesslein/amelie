#!/usr/bin/python


# Amelie v3, 2023
# by maxhaesslein, 2018-2023
# www.maxhaesslein.de


# dependencies: opencv, picamera2
# sudo apt install python3-opencv python3-picamera2
# sudo apt install xserver-xorg xinit
#
# start with:
# startx /home/mh/amelie/amelie


import cv2
from picamera2 import Picamera2
from libcamera import controls
import time
import cups
import sys
import os
from gpiozero import LED


outputDirectory = "/home/mh/amelie/images/"
tempDirectory = "/home/mh/amelie/temp/"

windowName = "Amelie"
windowWidth = 720
windowHeight = 720

# max resolution of camera module 3 is 4608x2592
captureWidth = 2592
captureHeight = 2592

printWidth = 384
printHeight = 384

continuousAutofocus = True

printerName = 'ZJ-58'


# PIN numbers are GPIO/BCM numbers
pinR = 17
pinG = 27
pinB = 22



print('amelie v.3')


# setup LED
ledR = LED(pinR)
ledG = LED(pinG)
ledB = LED(pinB)

currentColor = False
def setColor( color ):
    # this is a bit confusing, but to set a color, use led.off() and to disable that color use led.on()

    global currentColor

    if color == currentColor:
        return

    if color == 'red':
        ledR.off()
        ledG.on()
        ledB.on()
    elif color == 'green':
        ledR.on()
        ledG.off()
        ledB.on()
    elif color == 'blue':
        ledR.on()
        ledG.on()
        ledB.off()
    elif color == 'white':
        ledR.off()
        ledG.off()
        ledB.off()
    else:
        ledR.on()
        ledG.on()
        ledB.on()

    currentColor = color

setColor('white')

# setup printer
cupsConnection = cups.Connection()
cups.setUser('mh')
printers = cupsConnection.getPrinters()
printerFound = False
for printer in printers:
    if str(printer) == printerName:
        printerFound = printer
if not printerFound:
    print('Printer not found.')
    sys.exit()


# setup picam
picam = Picamera2()

picam.configure(
    picam.create_still_configuration(
        main={
            "size": (captureWidth, captureHeight),
            "format": "RGB888",
        },
        lores={
            "size": (windowWidth, windowHeight)
            # lores format is always YUV420
        },
    )
)

picam.start()

if continuousAutofocus:
    picam.set_controls({"AfMode": controls.AfModeEnum.Continuous})


# setup window
cv2.namedWindow( windowName, cv2.WINDOW_NORMAL )
cv2.resizeWindow( windowName, windowWidth, windowHeight )
cv2.setWindowProperty( windowName, cv2.WND_PROP_FULLSCREEN, cv2.WINDOW_FULLSCREEN )


font = cv2.FONT_HERSHEY_SIMPLEX


printJobId = False
fileName = False
printFileName = False
timestamp = False
state = 'idle'

# main loop
while True:
    preview = picam.capture_array("lores")

    # because the lores stream is always YUV420, we need to convert it:
    im = cv2.cvtColor( preview, cv2.COLOR_YUV420p2RGB )
    # and crop it:
    im = im[0:windowWidth, 0:windowHeight]
    # and mirror it:
    im = cv2.flip( im, 1 )

    cv2.putText( im, state, (10,80), font, 3, (0,255,0), 2, cv2.LINE_AA ) # DEBUG

    cv2.imshow( windowName, im )
    key = cv2.waitKey(1)


    if state == 'capture':
        setColor('blue')

        timestamp = str(int(time.time()))

        fileName = outputDirectory+timestamp+'.jpg'
        picam.capture_file(fileName, wait=True)

        state = 'prepare'

    elif state == 'prepare':
        setColor('blue')

        printImage = cv2.imread( fileName, cv2.IMREAD_GRAYSCALE)
        printImage = cv2.resize( printImage, (printWidth, printHeight) )

        printFileName = tempDirectory+timestamp+'_print.jpg'
        cv2.imwrite( printFileName, printImage )

        fileName = False
        timestamp = False
        
        state = 'print'

    elif state == 'print':
        setColor('red')

        if not printJobId:
            printJobId = cupsConnection.printFile( printerFound, printFileName, windowName, {} )

        elif not cupsConnection.getJobs().get(printJobId, None): # finished printing

            printJobId = False

            state = 'cleanup'

    elif state == 'cleanup':
        setColor('red')

        os.remove( printFileName )
        printFileName = False
        state = 'idle'

    else:
        # idle
        setColor('green')


    if key == 27: # escape
        break

    elif key == 32: # space

        if state == 'idle':
            state = 'capture'

    elif key == 13: # enter
        picam.autofocus_cycle(wait=False) # trigger autofocus async

    

