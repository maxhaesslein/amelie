#!/usr/bin/python


# Amelie v3, 2023
# by maxhaesslein, 2018-2023
# www.maxhaesslein.de


# dependencies: opencv, picamera2
# sudo apt install python3-opencv python3-picamera2
# sudo apt install xserver-xorg xinit
#
# start with:
# startx /home/mh/amelie/amelie

# autostart happens in ~/.config/systemd/user/amelie.service


from picamera2 import Picamera2
from libcamera import controls
from gpiozero import RGBLED, Button
from configparser import ConfigParser
import numpy as np
import cv2
import time
import cups
import sys
import os


options = {

    'debug': True,

    'mirrorScreen': True,

    'configPath': '/media/usb0/',

    'outputDirectory': '/home/mh/amelie/images/',
    'tempDirectory': '/home/mh/amelie/temp/',
    'backupDirectory': False,

    'windowName': 'Amelie',
    'windowWidth': 720,
    'windowHeight': 720,

    # max resolution of camera module 3 is 4608x2592
    'captureWidth': 2592,
    'captureHeight': 2592,

    'printWidth': 384,
    'printHeight': 384,

    'continuousAutofocus': True,

    'printerName': 'ZJ-58',
    'printerActive': True,

    # PIN numbers are GPIO/BCM numbers
    'pinR': 17,
    'pinG': 27,
    'pinB': 22,
    'pinButton': 23,
    'pinShutdown': 21,

    'font': cv2.FONT_HERSHEY_TRIPLEX,
    'fontSize': 5,
    'customFontFile': '/home/mh/amelie/Averia_Serif_Libre/AveriaSerifLibre-Bold.ttf',

    'debugFont': cv2.FONT_HERSHEY_COMPLEX_SMALL,
    'debugFontSize': 1,

    'preImage': 'pre.png',
    'postImage': 'post.png',

    'upsideDown': True,

}


print('amelie v.3')



# check for config file and read options
if os.path.isfile(options['configPath']+'amelie.txt'):
    configParser = ConfigParser()
    configParser.read(options['configPath']+'amelie.txt')
    for option in options:

        if configParser.has_option('Amelie', option):
            options[option] = configParser.get('Amelie', option)

        if options[option] == "False":
            options[option] = False
        elif options[option] == "True":
            options[option] = True
        elif option == "pinR" or option == "pinG" or option == "pinB" or option == "pinButton" or option == 'pinShutdown' or option == 'fontSize' or option == 'debugFontSize' or option == 'windowWidth' or option == 'windowHeight' or option == 'captureWidth' or option == 'captureHeight' or option == 'printWidth' or option == 'printHeight':
            options[option] = int(options[option])


# check if backupDirectory exists
if not os.path.isdir(options['backupDirectory']):
    options['backupDirectory'] = False



print(options)



# setup GPIOs
led = RGBLED( red=options['pinR'], green=options['pinG'], blue=options['pinB'], active_high = False )
button = Button( pin=options['pinButton'], pull_up=None, active_state=True )

shutdownButton = False
if options['pinShutdown']:
    shutdownButton = Button( pin=options['pinShutdown'], hold_time=5 )

currentColor = False
def setColor( color ):
    global currentColor

    if color == currentColor:
        return

    if color == 'white':
        led.color = (1,1,1)
    elif color == 'green':
        led.color = (0,1,0)
    elif color == 'green-fade':
        # led.color = (0,0,1)
        led.pulse( fade_in_time=0.5, fade_out_time=0.5, on_color=(0,1,0), off_color=(0,0,0) )
    elif color == 'red-blink':
        # led.color = (1,0,0)
        led.pulse( fade_in_time=0.2, fade_out_time=0.2, on_color=(1,0,0), off_color=(0,0,0) )
    else:
        # off
        led.color = (0,0,0)

    currentColor = color

setColor('white')

# setup printer
cupsConnection = cups.Connection()
cups.setUser('mh')
printers = cupsConnection.getPrinters()
printerFound = False
for printer in printers:
    if str(printer) == options['printerName']:
        printerFound = printer
if not printerFound:
    print('Printer not found.')
    sys.exit()


# setup picam
picam = Picamera2()

picam.configure(
    picam.create_still_configuration(
        main={
            "size": (options['captureWidth'], options['captureHeight']),
            "format": "RGB888",
        },
        lores={
            "size": (options['windowWidth'], options['windowHeight'])
            # lores format is always YUV420
        },
    )
)

picam.start()

if options['continuousAutofocus']:
    picam.set_controls({"AfMode": controls.AfModeEnum.Continuous})


# setup window
cv2.namedWindow( options['windowName'], cv2.WINDOW_NORMAL )
cv2.resizeWindow( options['windowName'], options['windowWidth'], options['windowHeight'] )
cv2.setWindowProperty( options['windowName'], cv2.WND_PROP_FULLSCREEN, cv2.WINDOW_FULLSCREEN )



# prepare overlays
customFont = False
if options['customFontFile']:
    customFont = cv2.freetype.createFreeType2()
    customFont.loadFontData( fontFileName=options['customFontFile'], id=0 )

overlays = {
    '3': np.zeros((options['windowWidth'], options['windowHeight'], 3), np.uint8),
    '2': np.zeros((options['windowWidth'], options['windowHeight'], 3), np.uint8),
    '1': np.zeros((options['windowWidth'], options['windowHeight'], 3), np.uint8),
    'capture': np.zeros((options['windowWidth'], options['windowHeight'], 3), np.uint8),
    'print': np.zeros((options['windowWidth'], options['windowHeight'], 3), np.uint8),
}
for text in overlays:

    string = text
    if string == 'capture':
        string = 'smile'
    elif string == 'print':
        string = 'drucke ...'
    elif string == '1':
        string = 'smile'

    fontSize = options['fontSize']
    if text == 'print':
        fontSize = int(fontSize / 2)

    fontwidth = fontSize * 2

    if customFont:
        fontSize = fontSize * 40
        textsize = customFont.getTextSize(string, fontSize, fontwidth)[0]
    else:
        textsize = cv2.getTextSize(string, options['font'], fontSize, fontwidth)[0]

    textX = int((overlays[text].shape[1] - textsize[0]) / 2)
    textY = int((overlays[text].shape[0] + textsize[1]) / 2)
    if text == 'print':
        textY = (overlays[text].shape[0] - textsize[1])

    color = (255,255,255)

    if customFont:
        customFont.putText( img=overlays[text], text=string, org=(textX, textY), fontHeight=fontSize, color=color, thickness=-1, line_type=cv2.LINE_AA, bottomLeftOrigin=True )
    else:
        cv2.putText( img=overlays[text], text=string, org=(textX, textY), fontFace=options['font'], fontScale=fontSize, color=color, thickness=fontwidth, lineType=cv2.LINE_AA )


# prepare pre & post image:
preImage = False
if os.path.isfile(options['configPath']+options['preImage']):
    preImage = cv2.imread( options['configPath']+options['preImage'], cv2.IMREAD_GRAYSCALE )
    preWidth, preHeight = preImage.shape[:2]
    preWidthResize = options['printWidth']
    preHeightResize = int(preWidthResize * preWidth/preHeight)
    preImage = cv2.resize( preImage, (preWidthResize, preHeightResize) )

postImage = False
if os.path.isfile(options['configPath']+options['postImage']):
    postImage = cv2.imread( options['configPath']+options['postImage'], cv2.IMREAD_GRAYSCALE )
    postWidth, postHeight = postImage.shape[:2]
    postWidthResize = options['printWidth']
    postHeightResize = int(postWidthResize * postWidth/postHeight)
    postImage = cv2.resize( postImage, (postWidthResize, postHeightResize) )


printJobId = False
fileName = False
printFileName = False
timestamp = False
countdownStart = False

state = 'idle'

# main loop
while True:
    preview = picam.capture_array("lores")

    # because the lores stream is always YUV420, we need to convert it:
    im = cv2.cvtColor( preview, cv2.COLOR_YUV420p2RGB )
    # and crop it:
    im = im[0:options['windowWidth'], 0:options['windowHeight']]

    if options['mirrorScreen']:
        im = cv2.flip( im, 1 )

    # DEBUG overlay
    if options['debug']:
        cv2.putText( im, state, (10,options['windowHeight']-10), options['debugFont'], options['debugFontSize'], (0,255,0), options['debugFontSize'], cv2.LINE_AA )

    # text overlay
    overlay_state = state
    if overlay_state == 'prepare':
        overlay_state = 'capture'
    elif overlay_state == 'cleanup':
        overlay_state = 'print'
    elif overlay_state == 'countdown':
        overlay_state = 3-int(time.time() - countdownStart)
        if overlay_state <= 0:
            overlay_state = 'capture'
            state = 'capture'
            countdownStart = False
        overlay_state = str(overlay_state)

    if overlay_state in overlays:
        im = cv2.add( im, overlays[overlay_state] )


    cv2.imshow( options['windowName'], im )
    key = cv2.waitKey(1)


    if state == 'countdown':
        pass

    elif state == 'capture':
        setColor('green-fade')

        timestamp = str(int(time.time()))

        fileName = options['outputDirectory']+timestamp+'.jpg'
        picam.capture_file(fileName, wait=True)

        if options['backupDirectory']:
            backupFileName = options['backupDirectory']+timestamp+'.jpg'
            os.system('cp '+fileName+' '+backupFileName )

        state = 'prepare'

    elif state == 'prepare':
        setColor('green-fade')

        printImage = cv2.imread( fileName, cv2.IMREAD_GRAYSCALE)
        printImage = cv2.resize( printImage, (options['printWidth'], options['printHeight']) )

        printFileName = options['tempDirectory']+timestamp+'_print.jpg'

        if preImage is not False:
            printImage = np.concatenate( (preImage, printImage), axis=0 )

        if postImage is not False:
            printImage = np.concatenate( (printImage, postImage), axis=0 )

        if options['upsideDown']:
            printImage = cv2.flip(printImage, -1)

        cv2.imwrite( printFileName, printImage )

        fileName = False
        timestamp = False

        state = 'print'

    elif state == 'print':
        setColor('red-blink')

        if options['printerActive']:

            if not printJobId:
                printJobId = cupsConnection.printFile( printerFound, printFileName, options['windowName'], {'fit-to-page': 'True'} )

            elif not cupsConnection.getJobs().get(printJobId, None): # finished printing

                printJobId = False

                state = 'cleanup'

        else:
            time.sleep(1)
            state = 'cleanup'

    elif state == 'cleanup':
        setColor('red-blink')

        if printFileName:
            os.remove( printFileName )
            printFileName = False

        state = 'idle'

    else:
        # idle
        setColor('green')

        if button.is_pressed:
            countdownStart = time.time()
            state = 'countdown'


    if options['pinShutdown'] and shutdownButton.is_held:
        print('shutdown button pressed')
        os.system('sudo shutdown now')
        break


    if key == 27: # escape
        break

    elif key == 32: # space

        if state == 'idle':
            state = 'capture'

    elif key == 13: # enter
        picam.autofocus_cycle(wait=False) # trigger autofocus async


print( 'bye ...' )

